@page "/taskCreator"
@using ClientEntity
@inject DataService data
@inject HttpClient Http
@inject NavigationManager NavManager

@using System 
@using System.IO
@using System.Net.Http.Headers

<PageTitle>Create a task</PageTitle>
    <input @bind="tasks.task_name" type="text" placeholder="Task name" />
    <br>
    <input @bind="tasks.task_description" type="text" placeholder="Task Description" />
    <br>
    <input @bind="tasks.task_points" type="text" /> - Points
    <br>
    <input @bind="tasks.task_duration" type="text" /> - Duration
    <br>
    Choose category:
    <select id="list_of_category" required="required" @onchange="@OnListCategoryChange" >
        <option value="">Choose the value</option>
        @for (var i = 0; i<CategoryList.Count; i++)
        {
            <option value="@i">@CategoryList[i].category_name</option>   
        }
    </select>
    <br><br>
    Choosen category:
    @if(inputCategory.category_name != ""){
        @inputCategory.category_name
        @inputCategory.id
    }
    <br>
    <InputFile OnChange="@OnInputFileChange" />
<br>
<br>
<br>
<button @onclick="@(() => UploadAll())">Save</button>

    

@code {
  
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    string inputFileName = "";
    private List<UploadResult> uploadResults = new();

    MultipartFormDataContent globalContent = new MultipartFormDataContent();

    MTask tasks = new MTask();   
    List<MCategory> CategoryList = new List<MCategory>();
    MCategory inputCategory = new  MCategory();

    @*----------------Downloading all Categories for drop-down list----------------*@
    protected override async Task OnInitializedAsync()
    {
        CategoryList = await data.GetCategory();
    }

    @*----------------Changing input category by choosen it from drop-down list----------------*@
    private void OnListCategoryChange (ChangeEventArgs e){
        if(e.Value != ""){
            var IndexSelectedCategory = int.Parse(e.Value.ToString());
            inputCategory = CategoryList[IndexSelectedCategory];
        }
    }

    @*----------------Uploading all values from form by clicking Save----------------*@
    async Task UploadAll()
    {
        var response = await Http.PostAsync("https://localhost:44361/api/TestFile", globalContent);
        await data.PostTask(initiolizeTask(tasks));
        NavManager.NavigateTo("/taskList");
    }

    @*----------------Initionalizing task before sending----------------*@
    private MTask initiolizeTask(MTask inputTask){
        MTask fullTask = new MTask();
        fullTask.task_name = inputTask.task_name;
        fullTask.task_description = inputTask.task_description;
        fullTask.task_file_name = inputFileName;
        fullTask.task_points = inputTask.task_points;
        fullTask.task_duration = inputTask.task_duration;
        fullTask.id_category = inputCategory.id; 
        fullTask.is_bonus_task = false;

        return fullTask;
    }

    @*----------------Making global content from file uploader for sending----------------*@
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            inputFileName = file.Name;
            
            globalContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }
    }
}
