@page "/taskCreator"
@using ClientEntity
@inject DataService data
@inject HttpClient Http

@using System 
@using System.IO
@using System.Net.Http.Headers

<PageTitle>Create a task</PageTitle>
    <input @bind="tasks.task_name" type="text" placeholder="Task name" />
    <br>
    <input @bind="tasks.task_description" type="text" placeholder="Task Description" />
    <br>
    <input @bind="tasks.task_points" type="text" /> - Points
    <br>
    <input @bind="tasks.task_duration" type="text" /> - Duration
    <br>

    <InputFile OnChange="@OnInputFileChange" />


    @if (fileNames.Count > 0)
{
    <ul>
        @foreach (var fileName in fileNames)
        {
            <li>
                File: @fileName
                <br>
                <span>
                    Stored File Name: @GetStoredFileName(fileName)
                </span>
                @* <button @onclick="@(() => DownloadFile(GetStoredFileName(fileName), fileName))">Download file</button> *@
            </li>
        }
    </ul>
}
<br>
<br>
<br>
<button @onclick="@(() => UploadAll())">Create a task</button>

    

@code {

    //public string id_category { get; set;} //Drop-down list
    
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    private List<string> fileNames = new();
    private List<UploadResult> uploadResults = new();

    MultipartFormDataContent globalContent = new MultipartFormDataContent();

    MTask tasks = new MTask();    


    string inputFileName;
HttpClient http;

    async Task UploadAll()
    {
        await data.PostTask(initiolizeTask(tasks));
        @* var response = await Http.PostAsync("https://localhost:44361/api/TestFile", globalContent); *@
    }
    

    private MTask initiolizeTask(MTask inputTask){
        MTask fullTask = new MTask();
        fullTask.task_name = inputTask.task_name;
        fullTask.task_description = inputTask.task_description;
        fullTask.task_file_name = inputFileName;
        fullTask.task_points = inputTask.task_points;
        fullTask.task_duration = inputTask.task_duration;
        fullTask.id_category = 1;
        fullTask.is_bonus_task = false;

        return fullTask;
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

            fileNames.Add(file.Name);

            inputFileName = file.Name;

            content.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
            
            globalContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);
        }

        @* var response = await Http.PostAsync("https://localhost:44361/api/TestFile", globalContent);
        var newUploadResults = await response.Content.ReadFromJsonAsync<List<UploadResult>>();

        if(newUploadResults is not null)
        {
            uploadResults = uploadResults.Concat(newUploadResults).ToList();
        } *@
    }

    private string? GetStoredFileName(string fileName)
    {
        var uploadResult = uploadResults.SingleOrDefault(f => f.FileName == fileName);
        if (uploadResult is not null)
            return uploadResult.StoredFileName;

        return "File not found.";
    }

    
}
