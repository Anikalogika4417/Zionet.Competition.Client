@using ClientEntity
@using ClientEnum
@using System.Text.RegularExpressions
@inject DataService data
@inject HttpClient Http
@inject NavigationManager NavigationManager;

<Card>
    <CardBody>
       <Heading Size="HeadingSize.Is1">Competition card</Heading>
    </CardBody>
    <CardBody>
        <Fields>
            <Field >
                <Heading Size="HeadingSize.Is4">Competition Name</Heading>
                <Paragraph>@curentComp.competition_name</Paragraph>
            </Field>
            <Field >
                <Heading Size="HeadingSize.Is4">Quantity of tasks</Heading>
                <Paragraph>@curentComp.task_quantity</Paragraph>
            </Field>
            <Field >
                <Heading Size="HeadingSize.Is4">Hash codes</Heading>
                <Paragraph>@curentComp.sm_hash_code</Paragraph>
            </Field>
        </Fields>
    </CardBody>
    <CardBody>
        <Fields>
            <Field>
                <Heading Size="HeadingSize.Is4">Start time</Heading>
                <Paragraph>@curentComp.competition_start</Paragraph>
            </Field>
            <Field>
                <Heading Size="HeadingSize.Is4">End time</Heading>
                <Paragraph>@curentComp.competition_end</Paragraph>
            </Field>
        </Fields>
        <Button Color="Color.Primary" Clicked="@onEditModeChange">Edit</Button>
        <br>
        <Blazorise.Link To=@linkToDashboard Target="Target.Blank">
            Competition dashboard
        </Blazorise.Link>
    </CardBody>
</Card>
<Card>
    <CardBody>
        <Heading Size="HeadingSize.Is1">List of tasks</Heading>
    </CardBody>
    <CardBody>
        <DataGrid TItem="MTask"
          Data="@ListOfTasks"
          @bind-SelectedRow="selectedTask"
          Responsive
          PageSize="50"
          FixedHeader
          FixedHeaderDataGridMaxHeight="300px">
            <DataGridColumn Field="@nameof(MTask.task_name)" Caption="Name" Sortable="true">
                <DisplayTemplate>
                    @{
                        var idCont = ( context as MTask )?.id;
                        var nameCont = ( context as MTask )?.task_name;
                        var link = "task/"+idCont;

                        <Blazorise.Link To=@link>
                            @nameCont
                        </Blazorise.Link>
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn Field="@nameof(MTask.task_points)" Caption="Points" Sortable="true" />
            <DataGridColumn Field="@nameof(MTask.task_duration)" Caption="Duration" Sortable="true" />
            <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="File name" Sortable="true" />
            <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="Bonus Task" Sortable="true">
                <DisplayTemplate>
                    @{
                        var idCont = ( context as MTask )?.id;

                        if ( ListOfBonusToTask.FindIndex((p)=>p.id_main_task == idCont) == -1 )
                        {
                            <NewCommandTemplate>
                                <Button Disabled="(idCont != selectedTask.id)" Color="Color.Success" Clicked="@onAddBTTaskClcik">Add bonus task</Button>
                            </NewCommandTemplate>
                        }
                        else{
                            @($"YES")
                        }
                    }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGrid>
    <Link To=@linkToTasks>
        Task manager
    </Link>
    </CardBody>
</Card>
<Card>
    <CardBody>
         <Fields>
            <Field >
                <Heading Size="HeadingSize.Is1">List of Groups</Heading>
                <DataGrid   TItem="MGroup"
                            Data="@ListOfGroups"
                            Responsive
                            PageSize="50"
                            FixedHeader
                            FixedHeaderDataGridMaxHeight="300px">
                    <DataGridColumn Field="@nameof(MGroup.group_name)" Caption="Name" Sortable="true" />
                    <DataGridColumn Field="@nameof(MGroup.id)" Caption="Link to Dashboard" Sortable="true">
                        <DisplayTemplate>
                            @{
                                var idCont = (context as MGroup).id;
                                var link = "/GroupTable/"+idCont;
                                <Blazorise.Link To=@link Target="Target.Blank">
                                    See group dashboard...
                                </Blazorise.Link>
                            }
                        </DisplayTemplate>
                    </DataGridColumn>
                </DataGrid>
                <Link To=@linkToGroups>
                    Group manager
                </Link>
            </Field>
        </Fields>
    </CardBody>
</Card>

@if(modalVisible == true){
    <CompetitionEditModal @bind-editCompetition="curentComp" @bind-modalVisible="modalVisible"/>
}

@if(modalShow){
    <TaskCreateModal @bind-modalVisible="modalShow" id_competition="@curentComp.id" isBonusTask="ETask.Bonus" mainId="selectedTask.id" />
}


@code{
    [Parameter]
    public MCompetition curentComp {get; set;}
    private TimeSpan startTime;
    private TimeSpan endTime;
    List<MTask> ListOfTasks = new List<MTask>();
    private List<MGroup> ListOfGroups = new List<MGroup>();
    List<MBonusToTask> ListOfBonusToTask = new List<MBonusToTask>();
    private string linkToTasks;
    private string linkToCategories;
    private string linkToGroups;
    private string linkToDashboard = "";
    private bool modalVisible = false;
    public MTask selectedTask = new MTask();
    public bool modalShow = false;

    protected override async Task OnInitializedAsync()
    {
        startTime = new TimeSpan(curentComp.competition_start.Hour, curentComp.competition_start.Minute, curentComp.competition_start.Second);
        endTime  = new TimeSpan(curentComp.competition_end.Hour, curentComp.competition_end.Minute, curentComp.competition_end.Second);
        linkToDashboard = "/Competition/" + curentComp.id + "/Dashboard";
        linkToTasks = "/Competition/"+curentComp.id+"/tasks";
        linkToCategories = "/Competition/"+curentComp.id+"/categories";
        linkToGroups = "/Competition/"+curentComp.id+"/groups";
        modalVisible = false;

        ListOfTasks = await data.GetMainTasks();
        ListOfGroups = await data.GetGroupsByIdComp(curentComp.id);
        ListOfBonusToTask = await data.GetLinkToBonusTask();
        var linksCompToMainTask = await data.GetTasksByIdComp(curentComp.id);
        ListOfTasks = await findAllTask(linksCompToMainTask);
    }
    
    @*----------------Find all tasks for spesial competition----------------*@
    private async Task<List<MTask>> findAllTask(List<MConnectionCompToTask> links){
        var newList = new List<MTask>();
        foreach (var link in links)
        {
            var a = ListOfTasks.FindIndex(p => p.id == link.id_task);
            if(a != -1){
                newList.Add(ListOfTasks[a]);
            }          
        }
        return newList;
    }
    private async Task onEditModeChange(){
        modalVisible = true;
    }

    private void onAddBTTaskClcik(){
        modalShow = true;
    }
}