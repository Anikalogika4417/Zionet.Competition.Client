@page "/CategoryList"
@page "/Competition/{compId:int}/categories"
@using ClientEntity
@inject DataService data
@inject NavigationManager uriHelper;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication


<PageTitle>Category List</PageTitle>

<h1>Categories:</h1>
    <table>
        <tr>
            <th> </th>
            <th>Category name</th>
        </tr>
        @for (var i=0;i<ListOfCategories.Count;i++)
        {       
            <tr>
                <td>
                    @if(choosenCategory != null && curMode == "Edit"){
                        <input  type="radio" 
                        id="@i+categoryList" 
                        name="categoryList" 
                        value="@ListOfCategories[i].id"
                        @onchange="@OnListCategoryChange"
                        disabled>
                    }
                    else{
                        <input  type="radio" 
                        id="@i+categoryList" 
                        name="categoryList" 
                        value="@ListOfCategories[i].id"
                        @onchange="@OnListCategoryChange">
                    }
                </td>                
                <td>
                    <label for="@i+categoryList">
                        <div>
                        @if(choosenCategory != null && ListOfCategories[i].id == choosenCategory.id){
                            @* Two-way binding doesn't work((( *@
                            @* <CategoryItem @bind-CurentCategory="choosenCategory.category_name" mode="@curMode"/> *@
                            
                            @switch (curMode)
                            {
                                case "Edit": {
                                    <div>
                                        <input @bind="choosenCategory.category_name" type="text"/>
                                        <br>
                                    </div>
                                    break;
                                }
                                case "Watch": {
                                    <div>
                                        @ListOfCategories[i].category_name
                                        <br>
                                    </div>
                                    break;
                                }    
                                default:
                                    <div>No mode choosen</div>
                                    break;
                            }
                        }
                        else{
                            @ListOfCategories[i].category_name
                        }
                        </div>
                    </label>
                </td>
            </tr>
        }
    </table>

    <button @onclick="@(() => OnModeChage())">@buttonName</button>
    @if(createFlag == false){
        <button @onclick="@(() => OnAddClick())">Add</button>
    }
    else{
        <h1>New Category:</h1>
        <input @bind="newCategory" type="text"/>
        <button @onclick="@(() => OnSaveClick())">Save category</button>
    }

@code
{
    [Parameter]
    public int? compId { get; set; }
    List<MCategory> ListOfCategories = new List<MCategory>();
    MCategory choosenCategory= new MCategory();
    public string curMode;
    private string buttonName = "";
    private bool createFlag = false;
    private string newCategory = "Category name";
    private string currUrl = "";
    private bool refreshStatus = false;
    
    @*----------------Downloading all competitions----------------*@
    protected override async Task OnInitializedAsync()
    {
        ListOfCategories = await data.GetCategory();
        choosenCategory = null;
        curMode = "Watch";
        buttonName = "Edit";
        if(compId != null){
            var linksCompToCategory = await data.GetCategoriesByIdComp((int)compId);
            ListOfCategories = await findAllCategories(linksCompToCategory);
        }
    }

    @*----------------Find all categories for spesial competition----------------*@
    private async Task<List<MCategory>> findAllCategories(List<MConnectionCompToCategory> links){
        var newList = new List<MCategory>();
        foreach (var link in links)
        {
            var a = ListOfCategories.FindIndex(p => p.id == link.id_category);
            if(a != -1){
                newList.Add(ListOfCategories[a]);
            }          
        }
        return newList;
    }

    protected override void OnAfterRender(bool firstRender)
    {
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    @*----------------Changing choosen competition by radio button----------------*@
    private void OnListCategoryChange(ChangeEventArgs e){
        if(e.Value != ""){
            var IndexSelectedCategory = ListOfCategories.FindIndex(p => p.id == int.Parse(e.Value.ToString()));
            choosenCategory = ListOfCategories[IndexSelectedCategory];
        }
    }

    @*----------------Changing mode and button name by button----------------*@
    private async Task OnModeChage (){
        curMode = curMode == "Edit"? "Watch": "Edit";
        buttonName = curMode == "Watch"? "Edit": "Save";
        if(curMode == "Watch"){
            await SaveAll();
        }
    }

    @*----------------Save all values from form by clicking Save----------------*@
    private async Task SaveAll()
    {
        ListOfCategories[ListOfCategories.FindIndex((p)=>p.id == choosenCategory.id)].category_name = choosenCategory.category_name;
        await data.PutCategory(ListOfCategories[ListOfCategories.FindIndex((p)=>p.id == choosenCategory.id)]);
    }

    @*----------------Add button form for adding new category----------------*@
    private async Task OnAddClick(){
        createFlag = true;
    }

    @*----------------Save button form for saving new category----------------*@
    private async Task OnSaveClick(){
        await data.PostCategory(InitiateCategory(newCategory));
        createFlag = false;
        newCategory = "Category name";
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
    }

    @*----------------Initiate category for saving----------------*@
    private MCategory InitiateCategory(string _newCategory){
        var newLine = new MCategory();
        newLine.category_name=_newCategory;
        return newLine;
    }
}