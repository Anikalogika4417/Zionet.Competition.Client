@using ClientEntity
@using System 
@using System.IO
@using System.Net.Http.Headers
@using System.Text.RegularExpressions

@inject DataService data
@inject HttpClient Http


<Card>
    <CardBody>
        <Heading Size="HeadingSize.Is4">Task Name</Heading>
        <Validation Validator="ValidateName">
            <TextEdit Disabled="Editmode == false" @bind-Text="curentTask.task_name" Placeholder="Enter task name..." >
                <Feedback>
                    <ValidationSuccess>name is good.</ValidationSuccess>
                    <ValidationError>Enter valid name (not null, less 50 chars)!</ValidationError>
                </Feedback>
            </TextEdit>
        </Validation>
    </CardBody>
    <CardBody>
        <Heading Size="HeadingSize.Is4">Task description</Heading>
        <Validation Validator="ValidateDescription">
            <TextEdit Disabled="Editmode == false" @bind-Text="curentTask.task_description" Placeholder="Enter task name..." >
                <Feedback>
                    <ValidationSuccess>description is good.</ValidationSuccess>
                    <ValidationError>Enter valid description (not null, less 100 chars)!</ValidationError>
                </Feedback>
            </TextEdit>
        </Validation>
    </CardBody>
     <CardBody>
        <Heading Size="HeadingSize.Is4">Task points</Heading>
        <Validation Validator="ValidatePoints">
             <NumericEdit Disabled="Editmode == false" @bind-Value="curentTask.task_points" Placeholder="Enter task name..." >
                <Feedback>
                    <ValidationSuccess>points is good.</ValidationSuccess>
                    <ValidationError>Enter valid points (not null, positive, less 100)!</ValidationError>
                </Feedback>
            </NumericEdit>
        </Validation>
    </CardBody>
     <CardBody>
        <Heading Size="HeadingSize.Is4">Task duration</Heading>
        <Validation Validator="ValidateDuration">
            <NumericEdit Disabled="Editmode == false" @bind-Value="curentTask.task_duration" Placeholder="Enter task name..." >
                <Feedback>
                    <ValidationSuccess>duration is good.</ValidationSuccess>
                    <ValidationError>Enter valid duration (not null, positive, less 1000)!</ValidationError>
                </Feedback>
            </NumericEdit>
        </Validation>
    </CardBody>
     <CardBody>
        <Heading Size="HeadingSize.Is4">Category name</Heading>
        <Select @bind-SelectedValue="@curentTask.id_category" Disabled="Editmode == false" >
            @foreach (var category in CategoryList)
            {
                <SelectItem Value="@category.id">
                    @category.category_name
                </SelectItem>
            }
        </Select>
    </CardBody>
    <Button Color="Color.Info" Clicked="@OnModeChage">@buttonName</Button>
</Card>




@* 
@switch (mode)
{
    case "Edit": {
        <div>
            <input @bind="curentTask.task_name" type="text"/>
            <br>
            <input @bind="curentTask.task_description" type="text" />
            <br>
            <input @bind="curentTask.task_points" type="text"/> - Points
            <br>
            <input @bind="curentTask.task_duration" type="text"/> - Duration
            <br>
            File:
            @if(curentTask.task_file_name != null){
                <div>@curentTask.task_file_name</div> 
                <button @onclick="@(() => OnFileRemove())">Remove!</button>
            }
            else{
                <InputFile OnChange="@OnInputFileChange" />
            }
            <br>
            Choosen category:
            @categoryName
            
            <select id="list_of_category_edit" required="required" @bind="@categoryName" >
                <option value="">Choose the value</option>
                @for (var i = 0; i<CategoryList.Count; i++)
                {
                    <option value="@CategoryList[i].category_name">@CategoryList[i].category_name</option>   
                }
            </select>

        </div>
        break;
    }
    case "Watch": {
        <div>
            Task Name: @curentTask.task_name
            <br>
            Task Description: @curentTask.task_description
            <br>
            Task Points: @curentTask.task_points
            <br>
            Task Duration: @curentTask.task_duration
            <br>
            Task File: @curentTask.task_file_name
            <br>
            Task Category: @categoryName
            <br>
            @* TODO Download button 
        </div>
        break;
    }    
    default:
        <div>No mode choosen</div>
        break;
} *@
@* <button @onclick="@(() => OnModeChage())">@buttonName</button> *@



@code{
    [Parameter]
    public MTask curentTask {get; set;}
    public bool Editmode {get; set;}
    List<MCategory> CategoryList = new List<MCategory>();
    private int maxAllowedFiles = int.MaxValue;
    private long maxFileSize = long.MaxValue;
    MultipartFormDataContent globalContent = new MultipartFormDataContent();
    string categoryName = "";
    string buttonName = "";

    @*----------------Downloading categories, defining catagory name and button name ----------------*@
    protected override async Task OnInitializedAsync()
    {
        CategoryList = await data.GetCategory();
        categoryName = CategoryList[CategoryList.FindIndex(p =>p.id==curentTask.id_category)].category_name;
        buttonName = Editmode == true? "Save": "Edit";
    }

    @*----------------Changing mode and button name by button----------------*@
    private async Task OnModeChage (){
        if(Editmode == true){
            //Console.WriteLine();
            await SaveAll();
        }
        Editmode = Editmode == true? false: true;
        buttonName = Editmode == true? "Save": "Edit";
    }

    @*----------------Save all values from form by clicking Save----------------*@
    async Task SaveAll()
    {
        await data.UpdateTask(curentTask);
    }

    
    @*----------------Making global content from file uploader----------------*@
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
            curentTask.task_file_name = file.Name;
            
            globalContent.Add(
                content: fileContent,
                name: "\"files\"",
                fileName: file.Name);

        }
        //TODO Сделать отправку файла сразу
        @* var response = await Http.PostAsync("https://localhost:44361/api/TestFile", globalContent); *@
        @* foreach (var file in response) *@
                    @* { *@
                        @* Console.WriteLine(response); *@
                    @* } *@
    }

    @*----------------Deleting file by clicking Remove!----------------*@
    private async Task OnFileRemove(){
        curentTask.task_file_name = null;
        //TODO Удалять файл!!!
    }

    @*----------------VALIDATIONS----------------*@
    @*----------------Name----------------*@
    void ValidateName( ValidatorEventArgs e )
    {
        var name = Convert.ToString( e.Value );
        e.Status = Regex.IsMatch(name, "^.{1,10}$", RegexOptions.IgnoreCase) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    @*----------------Description----------------*@
    void ValidateDescription( ValidatorEventArgs e )
    {
        var name = Convert.ToString( e.Value );
        e.Status = Regex.IsMatch(name, "^.{1,100}$", RegexOptions.IgnoreCase) ? ValidationStatus.Success : ValidationStatus.Error;
    }

    @*----------------Points----------------*@
    void ValidatePoints( ValidatorEventArgs e )
    {
        var name = Convert.ToString( e.Value );
        e.Status = Regex.IsMatch(name, "^(100|[1-9][0-9]?)$", RegexOptions.IgnoreCase) ? ValidationStatus.Success : ValidationStatus.Error;
    }
    @*----------------Duration----------------*@
    void ValidateDuration( ValidatorEventArgs e )
    {
        var name = Convert.ToString( e.Value );
        e.Status = Regex.IsMatch(name, "^(1000|[1-9][0-9]{0,2})$", RegexOptions.IgnoreCase) ? ValidationStatus.Success : ValidationStatus.Error;
    }
}
