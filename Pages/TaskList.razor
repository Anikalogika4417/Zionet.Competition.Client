@page "/taskList"
@page "/Competition/{compId:int}/tasks"
@using ClientEntity
@inject DataService data
@inject HttpClient Http

@using System 
@using System.IO
@using System.Net.Http.Headers

<PageTitle>Create a task</PageTitle>

<DataGrid TItem="MTask"
          Data="@ListOfTasks"
          ReadData="@OnReadData"
          TotalItems="@totalTasks"
          PageSize="5"
          ShowPager
          Responsive>
<DataGridCommandColumn />
    <DataGridColumn Field="@nameof(MTask.task_name)" Caption="Name" Sortable="true" />
    <DataGridColumn Field="@nameof(MTask.task_points)" Caption="Points" Sortable="true" />
    <DataGridColumn Field="@nameof(MTask.task_duration)" Caption="Duration" Sortable="true" />
    <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="File name" Sortable="true" />
    <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="Bonus Task" Sortable="true">
    <DisplayTemplate>
        @{
            var dateCont = ( context as MTask )?.id;

            if ( ListOfBonusToTask.FindIndex((p)=>p.id_main_task == dateCont) == -1 )
            {
                @($"NO")
            }
            else{
                @($"YES")
            }
        }
    </DisplayTemplate>
    </DataGridColumn>
</DataGrid>

@* 
<h1>Tasks:</h1>
    <table>
        <tr>
            <th> </th>
            <th>Task</th>
            <th> </th>
            <th>Points</th>
            <th>Duration</th>
            <th>File name</th>
            <th>Has Bonus Task</th>
        </tr>
        @for (var i=0;i<ListOfTasks.Count;i++)
        {       
            <tr>
                <td>
                    <input  type="radio" 
                            id="@i" 
                            name="taskList" 
                            value="@ListOfTasks[i].id"
                            @onchange="@OnListTaskChange">
                </td>                
                <td>
                    <label for="@i">
                        @ListOfTasks[i].task_name
                    </label>
                </td>
                <td>
                    <NavLink href="@($"task/{@ListOfTasks[i].id}")">
                        See details..
                    </NavLink>
                </td>
                <td>
                    <label for="@i">
                        @ListOfTasks[i].task_points
                    </label>
                </td>
                <td>
                    <label for="@i">
                        @ListOfTasks[i].task_duration
                    </label>
                </td>
                <td>
                    <label for="@i">
                        @ListOfTasks[i].task_file_name
                    </label>
                </td>
                @foreach (var bonusToTask in ListOfBonusToTask)
                {
                    @if(ListOfTasks[i].id == bonusToTask.id_main_task){
                        <td>
                            <label for="@i">
                                true
                            </label>
                        </td>            
                    }
                    else{
                        <td>
                            <label for="@i">
                                false
                            </label>
                        </td>            
                    }
                }
            </tr>
        }
    </table> *@

    <NavLink href="taskCreator">
                <span class="oi oi-list-rich" aria-hidden="true"></span>Create new task
    </NavLink>
    <br>

    @if(choosenTask != null){
        <NavLink href="@($"task/{@choosenTask.id}")">
                <span class="oi oi-list-rich" aria-hidden="true"></span>Edit
        </NavLink>
        <br>
        @if(ListOfBonusToTask.FindIndex(p =>p.id_main_task==choosenTask.id) == -1)
        {
            <NavLink href="taskCreator">
                <span class="oi oi-list-rich" aria-hidden="true"></span>Add Bonus task
            </NavLink>
        }
    }   
    

@code {
    [Parameter]
    public int? compId { get; set; }
    List<MTask> ListOfTasks = new List<MTask>();
    MTask choosenTask = new MTask();
    List<MBonusToTask> ListOfBonusToTask = new List<MBonusToTask>();

    private int totalTasks;

    private async Task OnReadData( DataGridReadDataEventArgs<MTask> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<MTask> response = null;

            // this can be call to anything, in this case we're calling a fictional api
            //var response = await Http.GetJsonAsync<Employee[]>( $"some-api/employees?page={e.Page}&pageSize={e.PageSize}" );
            if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                response = (await data.GetMainTasks()).Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
            else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                response = (await data.GetMainTasks()).Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
            else
                throw new Exception( "Unhandled ReadDataMode" );

            if ( !e.CancellationToken.IsCancellationRequested )
            {
                totalTasks = (await data.GetMainTasks()).Count;
                ListOfTasks = new List<MTask>( response ); // an actual data for the current page
            }
        }
    }


    @*----------------Downloading main task and all bonus tasks----------------*@
    protected override async Task OnInitializedAsync()
    {
        ListOfTasks = await data.GetMainTasks();
        ListOfBonusToTask = await data.GetAllBonusTask();
        choosenTask = null;
        if(compId != null){
            var linksCompToMainTask = await data.GetTasksByIdComp((int)compId);
            ListOfTasks = await findAllTask(linksCompToMainTask);
        }
    }

    @*----------------Find all tasks for spesial competition----------------*@
    private async Task<List<MTask>> findAllTask(List<MConnectionCompToTask> links){
        var newList = new List<MTask>();
        foreach (var link in links)
        {
            var a = ListOfTasks.FindIndex(p => p.id == link.id_task);
            if(a != -1){
                newList.Add(ListOfTasks[a]);
            }          
        }
        return newList;
    }

    @*----------------Changing choosen task by radio button----------------*@
    private void OnListTaskChange(ChangeEventArgs e){
        if(e.Value != ""){
            var IndexSelectedTask = ListOfTasks.FindIndex(p => p.id == int.Parse(e.Value.ToString()));
            choosenTask = ListOfTasks[IndexSelectedTask];
        }
    }
}
