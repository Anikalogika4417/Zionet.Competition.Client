@page "/taskList"
@page "/Competition/{compId:int}/tasks"
@using ClientEntity
@inject DataService data
@inject HttpClient Http

@using System 
@using System.IO
@using System.Net.Http.Headers
@using ClientEnum
@inject NavigationManager NavManager

<PageTitle>Create a task</PageTitle>

@if(loadingStatus){
    <Div>Loading...</Div>
}
else{
    @if(totalTasks <=5){
        modeQuantity = false;
    }
    <DataGrid TItem="MTask"
            Data="@ListOfTasksForTable"
            ReadData="@OnReadData"
            TotalItems="@totalTasks"
            CommandMode="DataGridCommandMode.ButtonRow"
            @bind-SelectedRow="selectedTask"
            PageSize="5"
            ShowPager = "@modeQuantity"
            Responsive>
        <DataGridColumn Field="@nameof(MTask.task_name)" Caption="Name" Sortable="true">
            <DisplayTemplate>
                @{
                    var idCont = ( context as MTask )?.id;
                    var nameCont = ( context as MTask )?.task_name;
                    var link = "task/"+idCont;

                    <Blazorise.Link To=@link>
                        @nameCont
                    </Blazorise.Link>
                }
            </DisplayTemplate>
        </DataGridColumn>
        <DataGridColumn Field="@nameof(MTask.task_points)" Caption="Points" Sortable="true" />
        <DataGridColumn Field="@nameof(MTask.task_duration)" Caption="Duration" Sortable="true" />
        <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="File name" Sortable="true" />
        <DataGridColumn Field="@nameof(MTask.task_file_name)" Caption="Bonus Task" Sortable="true">
            <DisplayTemplate>
                @{
                    var idCont = ( context as MTask )?.id;

                    if ( ListOfBonusToTask.FindIndex((p)=>p.id_main_task == idCont) == -1 )
                    {
                        <NewCommandTemplate>
                            <Button Disabled="(idCont != selectedTask.id)" Color="Color.Success" Clicked="@onAddBTTaskClcik">Add task</Button>
                        </NewCommandTemplate>
                    }
                    else{
                        @($"YES")
                    }
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGrid>
    <Button Color="Color.Success" Clicked="@onAddCliclk">Add</Button>
}

@if(modalShow){
    <TaskCreateModal @bind-modalVisible="modalShow" id_competition="@compId" isBonusTask="@sendingIsBT" mainId="selectedTask.id" />
}


@code {
    [Parameter]
    public int? compId { get; set; }
    List<MTask> ListOfTasks = new List<MTask>();
    private List<MTask> ListOfTasksForTable = new List<MTask>();
    List<MBonusToTask> ListOfBonusToTask = new List<MBonusToTask>();
    private int totalTasks;
    private MTask selectedTask = new MTask(); 
    private bool loadingStatus = true;
    private bool modeQuantity = true;
    private bool modalShow = false;
    public ETask sendingIsBT = ETask.Main;


    @*----------------Downloading main task and all bonus tasks----------------*@
    protected override async Task OnInitializedAsync()
    {
        ListOfTasks = await data.GetMainTasks();
        ListOfBonusToTask = await data.GetLinkToBonusTask();
        if(compId != null){
            var linksCompToMainTask = await data.GetTasksByIdComp((int)compId);
            ListOfTasks = await findAllTask(linksCompToMainTask, ListOfTasks);
        }
        totalTasks = ListOfTasks.Count;
        loadingStatus = false;
    }

    @*----------------Defining lines of table----------------*@
    private async Task OnReadData( DataGridReadDataEventArgs<MTask> e )
    {
        if ( !e.CancellationToken.IsCancellationRequested )
        {
            List<MTask> response = null;
                if ( e.ReadDataMode is DataGridReadDataMode.Virtualize )
                    response = ListOfTasks.Skip( e.VirtualizeOffset ).Take( e.VirtualizeCount ).ToList();
                else if ( e.ReadDataMode is DataGridReadDataMode.Paging )
                    response = ListOfTasks.Skip( ( e.Page - 1 ) * e.PageSize ).Take( e.PageSize ).ToList();
                else
                    throw new Exception( "Unhandled ReadDataMode" );

                if ( !e.CancellationToken.IsCancellationRequested )
                {
                    ListOfTasksForTable = new List<MTask>( response ); // an actual data for the current page
                }
            
        }
    }

    @*----------------Find all tasks for spesial competition----------------*@
    private async Task<List<MTask>> findAllTask(List<MConnectionCompToTask> links, List<MTask> _curentList){
        var newList = new List<MTask>();
        foreach (var link in links)
        {
            var a = _curentList.FindIndex(p => p.id == link.id_task);
            if(a != -1){
                newList.Add(_curentList[a]);
            }          
        }
        return newList;
    }

    private void onAddCliclk(){
        sendingIsBT = ETask.Main;
        modalShow =  true;
    }

    //TODO Поправить! Сейчас ведет на создание таски main. Не Бонусной!!!
    private void onAddBTTaskClcik(){
        sendingIsBT = ETask.Bonus;
        modalShow =  true;
    }
}
