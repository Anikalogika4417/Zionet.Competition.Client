@page "/fetchdata"
@inject HttpClient Http

@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Net.Http.Headers
@using System.Net
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.IdentityModel.Tokens.Jwt
@inject IAccessTokenProvider TokenProvider
@attribute [Authorize(Roles = "admin")]

<PageTitle>Users</PageTitle>

<h1>Users</h1>


    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users.recordset)
        {
            <tr>
                <td>@user.user_name</td>
                <td>@user.user_email</td>
                @if(@user.user_role=="admin"){
                    <td>@user.user_role</td>
                } else {
                    <Select TValue="string">
                        <SelectItem Value="1">user</SelectItem>
                        <SelectItem Value="2">competition admin</SelectItem>
                    </Select>
                }
            </tr>
        }
        </tbody>
    </table>


@code {
    private Responce users;

    protected override async Task OnInitializedAsync()
    {
        @* HttpResponseMessage response = await Http.GetAsync("http://localhost:5000/getUsers"); *@
        users = await Http.GetFromJsonAsync<Responce>("http://localhost:5000/getUsers");
        Console.WriteLine("response");
        Console.WriteLine(users.recordset);
        foreach (var user in users.recordset)
        {
           Console.WriteLine(user.user_name); 
        }

        GetToken tokenParams = new GetToken() 
        {
            grant_type = "client_credentials",
            client_id  = "3uv1uKVFiYFZ4GV9AxzARZF1kJ2doeNQ",
            client_secret = "A4BVRnNFA-VQF77qp4_9D-fDnxOTKgg1g47F1jMrkrXZNyZ8vXtXojkDetQ7P8p3",
            audience = "https://masa-api/"
        };
        string parseTokenParams = JsonConvert.SerializeObject(tokenParams);
        @* Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("content-type", "application/x-www-form-urlencoded");
        await Http.PostAsJsonAsync("https://dev-8th4j650wgitu0rp.us.auth0.com/oauth/token",parseTokenParams); *@

        var accessTokenResult = await TokenProvider.RequestAccessToken();
        var AccessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            AccessToken = token.Value;
            System.Console.WriteLine("My token:");
            System.Console.WriteLine(AccessToken);

        }

        @* Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken);
        HttpResponseMessage response = await Http.GetAsync("https://dev-8th4j650wgitu0rp.us.auth0.com/api/v2/users"); *@
        @* users = await Http.GetFromJsonAsync<Users[]>("https://dev-8th4j650wgitu0rp.us.auth0.com/api/v2/users"); *@

    }


    public class GetToken 
    {
        public string grant_type { get; set; }
        public string client_id { get; set; }
        public string client_secret { get; set; }
        public string audience { get; set; }
    }

    public class Responce
    {
        public User[]? recordset { get; set; }
    }

    public class User
    {
        public string create_date { get; set; }
        public int id { get; set; }
        public int id_status { get; set; }
        public string id_user { get; set; }
        public string update_date { get; set; }
        public string user_email { get; set; }
        public string user_phone { get; set; }
        public string user_role { get; set; }
        public string user_surname { get; set; }
        public string user_name { get; set; }
    }

}
