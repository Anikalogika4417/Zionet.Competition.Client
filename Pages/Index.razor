@page "/"
@inject HttpClient Http;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using System.IdentityModel.Tokens.Jwt
@inject IAccessTokenProvider TokenProvider
@using ClientEntity
@inject DataService data

@attribute [Authorize]

<h1>Profile</h1>

@if(@String.IsNullOrEmpty(@Role)){
    <p>Please wait while the administrator confirms your participation</p>
} else {
    <b><p>Name:</p></b>
    <p>@First_Name</p>
    <b><p>Surname:</p></b>
    <p>@Last_Name</p>
    <b><p>Email:</p></b>
    <p>@Email</p>

    <AuthorizeView Roles="user">
        <Authorized>
    
        <b><p>Registration for the competition:</p></b>

        <Select @bind-SelectedValue="@selectedValue">
            <SelectItem Value="0">Choose competition</SelectItem>
            @foreach (var competition in competitions)
            {
                <SelectItem Value="@competition.id">@competition.competition_name</SelectItem>
            }
        </Select>

        <button @onclick="onRegistration">Кegister</button>

        <p>@Output</p>

        </Authorized>
    </AuthorizeView>

}




@code {
    private Responce users;
    List<MCompetition> competitions = new List<MCompetition>();
    private List<MGroup> listOfGroups;
    private string Email;
    private string First_Name;
    private string Last_Name;
    private string User_Id;
    private string Role;
    private string Created_At;
    private string Id;
    public string Output;
    private int idUser;
    int selectedValue;
    @* private int selectedValue; *@

    protected override async Task OnInitializedAsync()
    {
        bool statusUser = default(bool);
        @* int idUser = default(int); *@
        @* int idUser = default(int); *@
        users = await data.GetUsers();
        competitions =  await data.GetCompetitionsAbleReg();

        Console.WriteLine(selectedValue);
        @*= await Http.GetFromJsonAsync<Responce>("http://localhost:5000/getUsers"); *@
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        var AccessToken = string.Empty;
        if (accessTokenResult.TryGetToken(out var token))
        {
            AccessToken = token.Value;
            System.Console.WriteLine("My token:");
            System.Console.WriteLine(AccessToken);
        }
        var handler = new JwtSecurityTokenHandler();
        var jwtSecurityToken = handler.ReadJwtToken(AccessToken);
        
        Email = jwtSecurityToken.Claims.First(claim => claim.Type == "mail").Value;
        First_Name = jwtSecurityToken.Claims.First(claim => claim.Type == "given_name").Value;
        Last_Name = jwtSecurityToken.Claims.First(claim => claim.Type == "family_name").Value;
        User_Id = jwtSecurityToken.Claims.First(claim => claim.Type == "user_id").Value;
        Role = jwtSecurityToken.Claims.First(claim => claim?.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")?.Value;
        Created_At = jwtSecurityToken.Claims.First(claim => claim.Type == "created_at").Value;

        User postUserInfo = new User() 
        {
            create_date = Created_At,
            id_status  = 1,
            id_user = User_Id,
            update_date = "2023-01-20",
            user_email = Email,
            user_phone = "puk",
            user_surname = Last_Name,
            user_name = First_Name,
            user_role = Role
        };

        string stringjson = JsonConvert.SerializeObject(postUserInfo);

        foreach (var user in users.recordset)
        {

            
            if(user.user_email.Contains(Email)){
                statusUser = true; 
                idUser = user.id;
                break;
            } else {
                statusUser = false;
            }
        }

        Console.WriteLine(idUser);

        if(!statusUser){
            await data.AddUser(postUserInfo);
        }
    }

    private async void onRegistration(){
        int count;
        ResponceUserToGroup getUserToGroup;
        listOfGroups = await data.GetGroupsByIdComp(selectedValue);
        int counting = listOfGroups.Count();
        Random rnd = new Random();
        int value = rnd.Next(0,counting);
        Console.WriteLine("listOfGroups");
        Console.WriteLine(listOfGroups[value].id);
        getUserToGroup = await data.GetUsersToGroup();

        UserToGroup postUserToGroup = new UserToGroup() 
        {
            id_user = idUser,
            id_create_user = idUser,
            id_update_user = idUser,
            id_group = listOfGroups[value].id,
            create_date = "2023-01-12",
            update_date = "2023-01-12",
            id_status  = 1
        };

        if(getUserToGroup.recordset.Length==0){
            await data.AddUserToGroup(postUserToGroup);
        } else {
            foreach(var i in getUserToGroup.recordset){
                if(i.id_user == idUser){
                    Output = "You are already registered";
                    break;
                } else {
                    Output = "You have successfully registered";
                    await data.AddUserToGroup(postUserToGroup);
                }
            }
        }
        StateHasChanged();
    }
} 