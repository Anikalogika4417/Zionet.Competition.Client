@page "/Competition/{compId:int}/groups"
@using ClientEntity
@inject DataService data
@inject NavigationManager uriHelper;
@using ClientEntity
@using ClientEnum
@inject DataService data
@inject NavigationManager NavManager

<PageTitle>Group List</PageTitle>


<DropContainer TItem="DropItem" Items="@items" ItemsFilter="@((item, dropZone) => item.group_name == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        <DropZone TItem="DropItem" Name="Unsave users" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Unsave users</Heading>
        </DropZone>  
        @foreach (var item in ListOfGroups)
        {
            <DropZone TItem="DropItem" Name="@item.group_name" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@item.group_name</Heading>
            </DropZone>  
        }
        
    </ChildContent>
    <ItemTemplate>
        <Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
            <CardBody>
                @* <Image Source="@context.image" Text="DragDrop image example" Style="width:48px;height:48px;" /> *@
                @context.user_name
                <br>
                @context.user_surname
                <br>
                @context.corEmail
            </CardBody>
        </Card>
    </ItemTemplate>
</DropContainer>

<Button Color="Color.Primary" Clicked="@onCreateClick">Add Group</Button>

<Modal @bind-Visible="@modalVisible">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Create task</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Task name</FieldLabel>
                <TextEdit @bind-Text="newGroup.group_name" Placeholder="Enter name..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Clicked="@SaveModal">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>        
@* <Button Clicked="onAddGroupClick"></Button> *@


@code
{
    [Parameter]
    public int? compId { get; set; }
    public bool modalVisible =false;
    private int idGroup;
    private MGroup newGroup = new MGroup();
    private List<MGroup> ListOfGroups = new List<MGroup>();

    
    private static List<MGroup> ListOfGroupsStat = new List<MGroup>();

    private void HideModal()
    {
        modalVisible = false;
    }

    private void onCreateClick()
    {
        modalVisible = true;
    }

    private async Task SaveModal()
    {
        await data.PostGroup(newGroup);
        uriHelper.NavigateTo(uriHelper.Uri, forceLoad: true);
        modalVisible = false;
    }

    public class DropItem
    {
        public int id_group { get; set; }
        public string group_name { get; set; }
        public int id_user { get; set; }
        public string user_name { get; set; }
        public string user_surname { get; set; }
        public string image { get; set; }
        public string corEmail { get; set; }
    }


    private List<DropItem> items = new List<DropItem>();

    @*----------------Downloading all competitions----------------*@
    protected override async Task OnInitializedAsync()
    {

        newGroup.group_icon = "test";
        newGroup.id_competition = (int)compId;
        ResponceUserToGroup getUserToGroup;
        getUserToGroup = await data.GetUsersToGroup();
        @* ListOfGroups = await data.GetGroups(); *@
        if(compId != null){
            ListOfGroups = await data.GetGroupsByIdComp((int)compId);
            ListOfGroupsStat = await data.GetGroupsByIdComp((int)compId);

            foreach(var i in getUserToGroup.recordset){
                Console.WriteLine(i.user_name);

                var a = new DropItem(){
                    id_group = i.id_group,
                    group_name = i.group_name,
                    id_user = i.id_user,
                    user_name = i.user_name,
                    image = "wwwroot/human.svg",
                    corEmail = i.user_email
                };
                items.Add(a);
            }
        }
    }

    private Task ItemDropped( DraggableDroppedEventArgs<DropItem> dropItem )
    {
        dropItem.Item.group_name = dropItem.DropZoneName;
        foreach(var i in ListOfGroups)
        {
            Console.WriteLine(i.id_group);
            if(dropItem.Item.group_name.Contains(i.group_name))
            {
                idGroup = i.id;
                break;
            }
        }

        UpdateUserToGroup updateUserToGroup = new UpdateUserToGroup{
            id_user = dropItem.Item.id_user,
            id_group = idGroup
        };
        Update(updateUserToGroup);
        return Task.CompletedTask;
    }

    private async void Update(UpdateUserToGroup info){
        await data.updateUserToGroup(info);
    }
}

//TODO удаление и добавление. Логика:
//Удаление - пост запрос в БД связи группы и юзера на статус - не активно
//Доавбление - из списка БД связи группы и юзера добавить можно тех, кто не активен