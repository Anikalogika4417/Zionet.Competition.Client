@page "/Competition/{compId:int}/groups"
@using ClientEntity
@inject DataService data
@inject NavigationManager uriHelper;

<PageTitle>Group List</PageTitle>


<DropContainer TItem="DropItem" Items="@items" ItemsFilter="@((item, dropZone) => item.group_name == dropZone)" ItemDropped="@ItemDropped" Flex="Flex.Wrap.Grow.Is1">
    <ChildContent>
        <DropZone TItem="DropItem" Name="Unsave users" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
            <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">Unsave users</Heading>
        </DropZone>  
        @foreach (var item in ListOfGroups)
        {
            <DropZone TItem="DropItem" Name="@item.group_name" Border="Border.Rounded" Background="Background.Light" Padding="Padding.Is3" Margin="Margin.Is3" Flex="Flex.Grow.Is1">
                <Heading Size="HeadingSize.Is4" Margin="Margin.Is3.FromBottom">@item.group_name</Heading>
            </DropZone>  
        }
        
    </ChildContent>
    <ItemTemplate>
        <Card Shadow="Shadow.Default" Margin="Margin.Is3.OnY">
            <CardBody>
                @* <Image Source="@context.image" Text="DragDrop image example" Style="width:48px;height:48px;" /> *@
                @context.user_name
                <br>
                @context.corEmail
            </CardBody>
        </Card>
    </ItemTemplate>
</DropContainer>

@* <Button Clicked="onAddGroupClick"></Button> *@


@code
{
    [Parameter]
    public int? compId { get; set; }
    private List<MGroup> ListOfGroups = new List<MGroup>();
    private static List<MGroup> ListOfGroupsStat = new List<MGroup>();

    public class DropItem
    {
        public int id_group { get; set; }
        public string group_name { get; set; }
        public int id_user { get; set; }
        public string user_name { get; set; }
        public string image { get; set; }
        public string corEmail { get; set; }
    }

    private List<DropItem> items = new List<DropItem>();
    private Task ItemDropped( DraggableDroppedEventArgs<DropItem> dropItem )
    {
        dropItem.Item.group_name = dropItem.DropZoneName;
        return Task.CompletedTask;
    }

    @*----------------Downloading all competitions----------------*@
    protected override async Task OnInitializedAsync()
    {
        @* ListOfGroups = await data.GetGroups(); *@
        if(compId != null){
            ListOfGroups = await data.GetGroupsByIdComp((int)compId);
            ListOfGroupsStat = await data.GetGroupsByIdComp((int)compId);
            for(int i = 0; i<ListOfGroupsStat.Count;i++){
                //TODO Здесь сделать получение по id группы всех юзеров отправлять в for список юзеров для каждой группы
                var a = new DropItem(){
                    id_group = ListOfGroupsStat[i].id,
                    group_name = ListOfGroupsStat[i].group_name,
                    id_user = 1,
                    user_name = "Nina",
                    image = "wwwroot/human.svg",
                    corEmail = "aaa@mail.com"
                };
                items.Add(a);
            }           
        }
    }
}

//TODO удаление и добавление. Логика:
//Удаление - пост запрос в БД связи группы и юзера на статус - не активно
//Доавбление - из списка БД связи группы и юзера добавить можно тех, кто не активен